// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __TrajectoryPlanner_hh__
#define __TrajectoryPlanner_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_TrajectoryPlanner
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_TrajectoryPlanner
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_TrajectoryPlanner
#endif



#ifndef __BasicDataType_hh_EXTERNAL_GUARD__
#define __BasicDataType_hh_EXTERNAL_GUARD__
#include "BasicDataType.hh"
#endif
#ifndef __ExtendedDataTypes_hh_EXTERNAL_GUARD__
#define __ExtendedDataTypes_hh_EXTERNAL_GUARD__
#include "ExtendedDataTypes.hh"
#endif
#ifndef __InterfaceDataTypes_hh_EXTERNAL_GUARD__
#define __InterfaceDataTypes_hh_EXTERNAL_GUARD__
#include "InterfaceDataTypes.hh"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE RTC

_CORBA_MODULE_BEG

  enum RETURN_VALUE { RETVAL_OK, RETVAL_INVALID_PARAMETER, RETVAL_EMPTY_MAP, RETVAL_INVALID_PRECONDITION, RETVAL_NOT_IMPL, RETVAL_UNKNOWN_ERROR /*, __max_RETURN_VALUE=0xffffffff */ };
  typedef RETURN_VALUE& RETURN_VALUE_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RETURN_VALUE;

  struct ArmPosition {
    typedef _CORBA_ConstrType_Fix_Var<ArmPosition> _var_type;

    
    ::CORBA::Double test;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ArmPosition::_var_type ArmPosition_var;

  typedef ArmPosition& ArmPosition_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ArmPosition;

#ifndef __RTC_mTrajectoryPlanner__
#define __RTC_mTrajectoryPlanner__

  class TrajectoryPlanner;
  class _objref_TrajectoryPlanner;
  class _impl_TrajectoryPlanner;
  
  typedef _objref_TrajectoryPlanner* TrajectoryPlanner_ptr;
  typedef TrajectoryPlanner_ptr TrajectoryPlannerRef;

  class TrajectoryPlanner_Helper {
  public:
    typedef TrajectoryPlanner_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_TrajectoryPlanner, TrajectoryPlanner_Helper> TrajectoryPlanner_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_TrajectoryPlanner,TrajectoryPlanner_Helper > TrajectoryPlanner_out;

#endif

  // interface TrajectoryPlanner
  class TrajectoryPlanner {
  public:
    // Declarations for this interface type.
    typedef TrajectoryPlanner_ptr _ptr_type;
    typedef TrajectoryPlanner_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_TrajectoryPlanner :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    RETURN_VALUE planTrajectory(const ::RTC::ArmPosition& start, const ::RTC::ArmPosition& goal, ::RTC::Path3D_out trajectory);

    inline _objref_TrajectoryPlanner()  { _PR_setobj(0); }  // nil
    _objref_TrajectoryPlanner(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_TrajectoryPlanner();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_TrajectoryPlanner(const _objref_TrajectoryPlanner&);
    _objref_TrajectoryPlanner& operator = (const _objref_TrajectoryPlanner&);
    // not implemented

    friend class TrajectoryPlanner;
  };

  class _pof_TrajectoryPlanner : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_TrajectoryPlanner() : _OMNI_NS(proxyObjectFactory)(TrajectoryPlanner::_PD_repoId) {}
    virtual ~_pof_TrajectoryPlanner();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_TrajectoryPlanner :
    public virtual omniServant
  {
  public:
    virtual ~_impl_TrajectoryPlanner();

    virtual RETURN_VALUE planTrajectory(const ::RTC::ArmPosition& start, const ::RTC::ArmPosition& goal, ::RTC::Path3D_out trajectory) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrajectoryPlanner;

_CORBA_MODULE_END



_CORBA_MODULE POA_RTC
_CORBA_MODULE_BEG

  class TrajectoryPlanner :
    public virtual RTC::_impl_TrajectoryPlanner,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~TrajectoryPlanner();

    inline ::RTC::TrajectoryPlanner_ptr _this() {
      return (::RTC::TrajectoryPlanner_ptr) _do_this(::RTC::TrajectoryPlanner::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_RTC
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(RTC::RETURN_VALUE _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (RTC::RETURN_VALUE& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= RTC::RETVAL_UNKNOWN_ERROR) {
    _e = (RTC::RETURN_VALUE) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, RTC::RETURN_VALUE _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTC::RETURN_VALUE& _s);

extern void operator<<=(::CORBA::Any& _a, const RTC::ArmPosition& _s);
extern void operator<<=(::CORBA::Any& _a, RTC::ArmPosition* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTC::ArmPosition*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTC::ArmPosition*& _sp);

void operator<<=(::CORBA::Any& _a, RTC::TrajectoryPlanner_ptr _s);
void operator<<=(::CORBA::Any& _a, RTC::TrajectoryPlanner_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTC::TrajectoryPlanner_ptr& _s);



inline void
RTC::TrajectoryPlanner::_marshalObjRef(::RTC::TrajectoryPlanner_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_TrajectoryPlanner
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_TrajectoryPlanner
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_TrajectoryPlanner
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_TrajectoryPlanner
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_TrajectoryPlanner
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_TrajectoryPlanner
#endif

#endif  // __TrajectoryPlanner_hh__

